FUNCTION ZFM_UTL_SSV_LOAD_BP_PRC.
*"----------------------------------------------------------------------
*"*"Локальный интерфейс:
*"  IMPORTING
*"     REFERENCE(IV_PROC_NUM) TYPE  I
*"     REFERENCE(IV_COMMIT) TYPE  CHAR1
*"     REFERENCE(IV_AUGRP) TYPE  BU_AUGRP DEFAULT 'UBRR'
*"  EXPORTING
*"     REFERENCE(EV_RESULT) TYPE  TEXT1024
*"----------------------------------------------------------------------
"Создание ДП ФЛ через BOL
  DATA: lr_core                TYPE REF TO cl_crm_bol_core,
        lr_transaction         TYPE REF TO if_bol_transaction_context,
        lr_factory             TYPE REF TO cl_crm_bol_entity_factory,
        lt_cli_fiz             type standard table of ZTB_PRTNRDAT_OLP,
        lr_builheader          TYPE REF TO cl_crm_bol_entity,
        ls_zbut000_ext         TYPE zbut000_ext,
        lv_fatca               type ZED_FATCA,
        lt_params              TYPE crmt_name_value_pair_tab,
        ls_params              TYPE crmt_name_value_pair,
        lv_str_buf             type string,
        lv_partner             type bu_partner ,
*        ls_dfkkbptaxnum        type DFKKBPTAXNUM,
*        ls_cfm                 type ZUBRR_DM_CFM,
        ls_zbut                type ZBUT0000000001,
        lv_id_main             type char1,
        lv_dflt_adr            type char1,
        lr_identification_ent  TYPE REF TO cl_crm_bol_entity,
        lr_addr_ent            TYPE REF TO cl_crm_bol_entity,
        lr_addr_usg_ent        TYPE REF TO cl_crm_bol_entity,
        ls_addr_usg            TYPE crmt_bupa_il_addr_usage,
        lr_email_ent           TYPE REF TO cl_crm_bol_entity,
        lr_BuilNotesRel        TYPE REF TO cl_crm_bol_entity,
        lr_tel_ent             TYPE REF TO cl_crm_bol_entity,
        lv_consnumber_i        type i,
        lv_comment             type string value '',
*        lt_bp_adr2             type ZTAB_ADR2_TSH_TWR_PHNS,
*        lv_flg_nouse           type string,
        lv_rez                 type string,
        lv_len                 type i,
        lv_error               type string
       ,lr_error               type ref to cx_root
       ,lr_sql_error           type ref to cx_sy_native_sql_error
*       ,lr_conv_error          type ref to cx_sy_conversion_no_number
*       ,lv_Mobile_Tel          type char1
*       ,lv_success             Type CRMT_BOOLEAN
       ,lt_but000              type standard table of but000
       ,ls_but000              type but000
       ,lv_commit              type char1
       ,lv_partner_guid        type but000-partner_guid
       ,lr_ent_col             type ref to IF_BOL_ENTITY_COL.
******************************  ДОКУМЕНТЫ  *********************************************************************
  data: ls_idnumber           TYPE zcrmt_bupa_il_identification,
        lt_idnumber           TYPE TABLE OF zcrmt_bupa_il_identification,
        ls_docdata_olp        TYPE ZTB_DOCDATA_OLP,
        lt_docdata_olp        TYPE standard table of ZTB_DOCDATA_OLP.
*************************************************************************************************************

  field-symbols:<ls_cli_fiz>   type ZTB_PRTNRDAT_OLP.

  lv_commit = IV_COMMIT.

  select *
    into table lt_cli_fiz[]
    from ZTB_PRTNRDAT_OLP
   where PROCESS_NUMBER = IV_PROC_NUM        " Номер процесса
     and PROCESSED      = '0'.               " 0 - не обработанные, 1 - успешно, 2 - ошибка

*** Поиск ДП  ***********************************************************
  CALL FUNCTION 'ZFM_UTL_SSV_FIND_BP'
    TABLES CT_CLIENT = lt_cli_fiz[].
*************************************************************************
  read table lt_cli_fiz[] with key PROCESSED = '0' transporting no fields.
  if sy-subrc eq 0.
    lr_core = cl_crm_bol_core=>get_instance( ).
*      lr_core->start_up( 'BP_APPL' ).
    lr_core->load_component_set( 'BP_APPL' ).
    lr_factory = lr_core->get_entity_factory( 'BuilHeader' ).
    lr_transaction ?= lr_core->get_transaction( ).

    loop at  lt_cli_fiz[] assigning <ls_cli_fiz> where PROCESSED = '0'."По списку клиентов создаем ДП
      CLEAR: lt_params[], lv_comment.
      if <ls_cli_fiz>-zres_partner is initial.
        ls_params-name  = 'BP_CATEGORY'.
        ls_params-value = '1'."ФЛ
        append ls_params to lt_params.

        ls_params-name  = 'LASTNAME'.
        ls_params-value = <ls_cli_fiz>-LASTNAME.
        append ls_params to lt_params.

        ls_params-name  = 'FIRSTNAME'.
        ls_params-value = <ls_cli_fiz>-FIRSTNAME.
        append ls_params to lt_params.

        ls_params-name  = 'MIDDLENAME'.
        ls_params-value = <ls_cli_fiz>-MIDDLENAME.
        APPEND ls_params TO lt_params.

        ls_params-name  = 'BIRTHDATE'.
        ls_params-value = <ls_cli_fiz>-BIRTHDATE.
        append ls_params to lt_params.

        ls_params-name  = 'ZZAFLD000002'."резидент
        ls_params-value = 'Р'. " По умолчанию резидент
        if <ls_cli_fiz>-CLIENTKIND = '2'.
          ls_params-value = 'N'.
        endif.
        append ls_params to lt_params.

        condense <ls_cli_fiz>-BIRTHPLACE.
        if <ls_cli_fiz>-BIRTHPLACE is not initial.
          ls_params-name  = 'BIRTHPLACE'.
          ls_params-value = <ls_cli_fiz>-BIRTHPLACE.
          append ls_params to lt_params.
        endif.

        CLEAR ls_params-value.
        ls_params-value = <ls_cli_fiz>-NATIONALITY. " Госпринодлежность
        if ls_params-value is initial.
          ls_params-value = 'RU'.
        endif.

        if ls_params-value is not initial.
          ls_params-name  = 'NATIONALITY'.
          append ls_params to lt_params.
        endif.


        CLEAR ls_params-value.
        if ls_params-value is not initial.
          ls_params-value = 1.              " является"
        else.
          ls_params-value = 3.              " По умолчанию - "Не является"
        endif.
        ls_params-name  = 'ZZAFLD000003'. " ИПДЛ
        append ls_params to lt_params.

        ls_params-name  = 'AUTHORIZATIONGROUP'.
        ls_params-value = IV_AUGRP. " 'UBRR' или 'VUZB'
        append ls_params to lt_params.

        if <ls_cli_fiz>-SEX eq '1'. "Ж
          ls_params-value = '1'.
        else.
          ls_params-value = '2'.
        endif.
        ls_params-name  = 'SEX'.
        append ls_params to lt_params.

        ls_params-name  = 'MARITALSTATUS'.
        CLEAR ls_params-value.
        ls_params-value = <ls_cli_fiz>-MARITALSTATUS.

        if ls_params-value is NOT INITIAL.
          append ls_params to lt_params.
        endif.

        CLEAR ls_params-value.
        ls_params-value = <ls_cli_fiz>-QUESTION_BKI.
        if ls_params-value is not initial.
          ls_params-name  = 'ZZAFLD000008'. "Вопрос
          append ls_params to lt_params.

          ls_params-value = <ls_cli_fiz>-ANSWER_BKI. "lv_str_buf.
          ls_params-name  = 'ZZAFLD000009'. "Ответ
          append ls_params to lt_params.
        endif.

*         if   <ls_cli_fiz>-C_CLASSTYPE_63 <> 1
*           or <ls_cli_fiz>-C_CLASSTYPE_64 <> 1.
*               ls_params-value = '1'."экстремист
*         else.
               ls_params-value = '2'."неэкстремист
*         endif.
        ls_params-name  = 'ZZAFLD00000L'. "Является экстремистом
        append ls_params to lt_params.
        lr_builheader = lr_factory->create( lt_params ).
      else.
        lv_partner = <ls_cli_fiz>-zres_partner.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_partner
          IMPORTING
            output = lv_partner.

        SELECT SINGLE partner_guid
          INTO lv_partner_guid
          FROM but000
         WHERE partner = lv_partner.

        lr_builheader  = lr_core->get_root_entity( iv_object_name = 'BuilHeader'
                                                   iv_object_guid =  lv_partner_guid ).
      endif.

         if lr_builheader is not bound.
            <ls_cli_fiz>-PROCESSED = '2'. " 'ERROR'.
            lv_str_buf = <ls_cli_fiz>-EXTERNAL_ID.
            concatenate 'Не удалось создать нового ДП:'
                        lv_str_buf
                        <ls_cli_fiz>-FIRSTNAME
                        <ls_cli_fiz>-LASTNAME
                        <ls_cli_fiz>-MIDDLENAME
               into <ls_cli_fiz>-ZRESULT_MSG separated by space.
         else.
             lv_partner = lr_builheader->get_property_as_string( 'BP_NUMBER' ).
             CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING INPUT  = lv_partner
                  IMPORTING OUTPUT = lv_partner.
             <ls_cli_fiz>-ZRES_PARTNER = lv_partner.
*            lr_builheader->get_property_as_value( exporting iv_attr_name = 'BP_GUID'
*                                                  importing ev_result    = lv_partner_guid  ).

******************************  ДОКУМЕНТЫ  *********************************************************************

  clear: lt_idnumber[], ls_idnumber.

  select *
    into table lt_docdata_olp
    from ZTB_DOCDATA_OLP
   where EXTERNAL_ID eq <ls_cli_fiz>-EXTERNAL_ID.

  loop at lt_docdata_olp into ls_docdata_olp.
    ls_idnumber-identificationtype   = ls_docdata_olp-TYPEDOC.        " Вид идентификации
    ls_idnumber-zzafld000012         = ls_docdata_olp-SERIALDOC.      " Серия документа
    ls_idnumber-IDINSTITUTE          = ls_docdata_olp-IDINSTITUTEDOC. " Ответственное учреждение для идентификационного номера
    ls_idnumber-identificationnumber = ls_docdata_olp-NUMBERDOC.      " Идентификационный номер
    ls_idnumber-identrydate          = ls_docdata_olp-IDENTRYDATE.    " Дата записи для номера идентификатора
    ls_idnumber-zzafld000011         = ls_docdata_olp-IDINSTITUTEDOC. " Ответсвенная инстанц
    ls_idnumber-zzafld000013         = ls_docdata_olp-CODEOTDDOC.     " Код подразделения
    ls_idnumber-idvalidtodate        = ls_docdata_olp-IDVALIDTODATE.  " Конец срока действия идентификационного номера
    if ls_docdata_olp-NUMBERROW = 1.
      ls_idnumber-ZZAFLD000014         = 'X'. " Основной документ
    else.
      ls_idnumber-ZZAFLD000014         = ' '.
    endif.
    ls_idnumber-COUNTRY              = 'RU'.
    append ls_idnumber to lt_idnumber.
  endloop.

  lr_ent_col            ?= lr_builheader->GET_RELATED_ENTITIES( IV_RELATION_NAME = 'BuilIdentificationRel'  ).
  if lr_ent_col is bound.
    lr_identification_ent = lr_ent_col->get_first( ).
    while lr_identification_ent is bound.
      lr_ent_col->remove( lr_identification_ent ).
      lr_identification_ent->delete( ).
      lr_identification_ent = lr_ent_col->get_first( ).
    endwhile.
  endif.

  LOOP at lt_idnumber[] INTO ls_idnumber.
    lr_identification_ent = lr_builheader->create_related_entity( 'BuilIdentificationRel' ).
    if lr_identification_ent is bound.
      if    lv_id_main               <> 'X'
        and ls_idnumber-ZZAFLD000014 = 'X'.
        ls_idnumber-zzafld000014         = 'X'.
        lv_id_main = 'X'.
      else.
        ls_idnumber-zzafld000014         = ' '.
      endif.
      lr_identification_ent->switch_to_change_mode( ).
      lr_identification_ent->set_properties( is_attributes = ls_idnumber ).
    endif.
  ENDLOOP." at lt_idnumber[] INTO ls_idnumber.
******************************  ДОКУМЕНТЫ (КОНЕЦ)  *********************************************************************

******************************  АДРЕСА  *********************************************************************
  data: ls_address            type crmt_bupa_il_address
       ,lt_address            type table of crmt_bupa_il_address
       ,ls_addrdat_olp        type ZTB_ADDRDAT_OLP
       ,lt_addrdat_olp        type standard table of ZTB_ADDRDAT_OLP
       .

  clear: lt_address[], ls_address.
  select *
    into table lt_addrdat_olp
    from ZTB_ADDRDAT_OLP
   where EXTERNAL_ID eq <ls_cli_fiz>-EXTERNAL_ID.

  loop at lt_addrdat_olp into ls_addrdat_olp.
    move-corresponding ls_addrdat_olp to ls_address.
    append ls_address to lt_address.
  endloop.

  lr_ent_col            ?= lr_builheader->GET_RELATED_ENTITIES( IV_RELATION_NAME = 'BuilAddressRel' ).
  if lr_ent_col is bound.
    lr_addr_ent           = lr_ent_col->get_first( ).
    while lr_addr_ent is bound.
      lr_ent_col->remove( lr_addr_ent ).
      lr_addr_ent->delete( ).
      lr_addr_ent = lr_ent_col->get_first( ).
    endwhile.
  endif.

  LOOP at lt_address[] INTO ls_address.
    concatenate lv_comment
                'Адрес='   ls_address-ADR_NOTES
                cl_abap_char_utilities=>cr_lf
           into lv_comment
   separated by space.

    lr_addr_ent = lr_builheader->create_related_entity( 'BuilAddressRel' ).
    if lr_addr_ent is bound.
      if   ls_address-country = '1'
        or ls_address-country is initial.
        ls_address-country = 'RU'.
      endif.

      if   ls_address-country is initial
        or sy-subrc           <> 0.
        ls_address-country = 'RU'.
      endif.

                   translate ls_address-HOME_CITY to upper case.
                   select single ad~regiogroup
                   into  ls_address-regiogroup
                   from adrreggrpt as ad
                   where ad~descript = ls_address-HOME_CITY.
                   if sy-subrc <> 0.
                      ls_address-regiogroup = ''.
                   endif.
                   ls_address-rem_langu       = 'R'.

                   CASE ls_address-PCODE1_EXT.
                       WHEN '1'.
                        ls_addr_usg-addresstype = 'ZADR_1'.
                       WHEN '2'.
                        ls_addr_usg-addresstype = 'ZADR_2'.
                       WHEN OTHERS.
                        ls_addr_usg-addresstype = 'ZADR_3'.
                   ENDCASE.
                   lr_addr_ent->set_properties( is_attributes = ls_address ).
*                  Создаем дочерний объект Адреса - Вид адреса
                   lr_addr_usg_ent = lr_addr_ent->create_related_entity( 'BuilAddressUsageRel' ).
                   lr_addr_usg_ent->set_properties( is_attributes = ls_addr_usg ).
                   if lv_dflt_adr is initial."первый адрес - по умолчанию
                     lr_addr_usg_ent = lr_addr_ent->create_related_entity( 'BuilAddressUsageRel' ).
                     ls_addr_usg-addresstype = 'XXDEFAULT'.
                     lr_addr_usg_ent->set_properties( is_attributes = ls_addr_usg ).
                   endif.
                   lv_dflt_adr = 'X'.
                   lr_core->modify( ).

                endif."if lr_addr_ent is bound.
  ENDLOOP." LOOP at lt_address[] INTO ls_address.
******************************  АДРЕСА (КОНЕЦ)  *********************************************************************

******************************  EMAIL-Ы  ********************************************************************
  data: ls_email              TYPE crmst_email_buil
       ,lt_email              TYPE TABLE OF crmst_email_buil.
  CLEAR: lt_email[].
  ls_email-CONSNUMBER = 5. " 5,6,16,20
  ls_email-e_mail     = <ls_cli_fiz>-E_MAIL.
  ls_email-COMM_NOTES = <ls_cli_fiz>-E_MAIL.
  if ls_email-e_mail is not initial.
    append ls_email to lt_email.
  endif.


  lr_ent_col ?= lr_builheader->GET_RELATED_ENTITIES( IV_RELATION_NAME = 'BuilIndependantEmailRel' ).
  if lr_ent_col is bound.
    lr_email_ent = lr_ent_col->get_first( ).
    while lr_email_ent is bound.
      lr_ent_col->remove( lr_email_ent ).
      lr_email_ent->delete( ).
      lr_email_ent = lr_ent_col->get_first( ).
    endwhile.
  endif.

  LOOP AT lt_email[] INTO  ls_email.
               if ls_email-e_mail CA '@'.
                   lr_email_ent = lr_builheader->create_related_entity( 'BuilIndependantEmailRel' ).
                   if lr_email_ent is bound.
                      lr_email_ent->switch_to_change_mode( ).
                      ls_email-std_no  = 'X'.
                      lr_email_ent->set_properties( is_attributes = ls_email ).
                   endif.
               else.
                   concatenate lv_comment
                               'Контакт типа'   ls_email-CONSNUMBER
                               ', значение = '  ls_email-e_mail
                                                ls_email-COMM_NOTES
                               cl_abap_char_utilities=>cr_lf
                   into lv_comment
                   separated by space.
               endif." ls_email-e_mail CP '@'.
               lr_core->modify( ).
  ENDLOOP." lt_email[] INTO  ls_email.
******************************  EMAIL-Ы  (КОНЕЦ)********************************************************************
******************************  ТЕЛЕФОНЫ  *******************************************************************
DATA: ls_tel                TYPE crmst_telephone_buil
     ,lt_tel                TYPE TABLE OF crmst_telephone_buil
     ,ls_telnedat_olp       TYPE ztb_telnedat_olp
     ,lt_telnedat_olp       TYPE standard table of ztb_telnedat_olp.

  clear: lt_telnedat_olp[], ls_telnedat_olp.
  select *
    into table lt_telnedat_olp
    from ZTB_TELNEDAT_OLP
   where EXTERNAL_ID eq <ls_cli_fiz>-EXTERNAL_ID.

  CLEAR: lt_tel[].
  loop at lt_telnedat_olp into ls_telnedat_olp.
    move-corresponding ls_telnedat_olp to ls_tel.
    append ls_tel to lt_tel.
  endloop.

  lr_ent_col ?= lr_builheader->GET_RELATED_ENTITIES( IV_RELATION_NAME = 'BuilIndependantPhoneRel' ).
  if lr_ent_col is bound.
    lr_tel_ent = lr_ent_col->get_first( ).
    while lr_tel_ent is bound.
      lr_ent_col->remove( lr_tel_ent ).
      lr_tel_ent->delete( ).
      lr_tel_ent = lr_ent_col->get_first( ).
    endwhile.
  endif.

             lv_consnumber_i = 1.
             clear lv_comment.
             LOOP AT lt_tel[] INTO  ls_tel.
               concatenate lv_comment
                           'Контакт-телефон типа' ls_tel-EXTENSION
                           ', значение = '        ls_tel-COMM_NOTES
                           cl_abap_char_utilities=>cr_lf
               into lv_comment
               separated by space.

               if    ls_tel-telephone is not initial
                 and ls_tel-telephone <> '9'
                 and ls_tel-telephone <> '17'
                 and ls_tel-telephone <> '18'
                 and ls_tel-telephone <> '22'
                 and ls_tel-telephone <> '23'
                 .
                   lr_tel_ent = lr_builheader->create_related_entity( 'BuilIndependantPhoneRel' ).
                   if lr_tel_ent is bound.
                       lr_tel_ent->switch_to_change_mode( ).
*                       ls_tel-country    = 'RU'.
                       if lv_consnumber_i = 1.
                          ls_tel-std_no     = 'X'.
                       endif.
*                       if ls_tel-telephone+0(1) = '9'.
*                          ls_tel-r_3_user   = '2'.
*                          ls_tel-comm_notes = 'CO'."Контактный
*                       else.
*                          ls_tel-r_3_user   = '1'.
*                          ls_tel-comm_notes = 'WT'."Рабочий
*                       endif.
                       ls_tel-consnumber = lv_consnumber_i.
                       lv_consnumber_i = lv_consnumber_i + 1.
                       lr_tel_ent->set_properties( is_attributes = ls_tel ).
                   endif.
               endif." gs_tel-telephone is not initial.
               lr_core->modify( ).
             ENDLOOP." gt_tel[] INTO  gs_tel.


  lr_ent_col ?= lr_builheader->GET_RELATED_ENTITIES( IV_RELATION_NAME = 'BuilNotesRel' ).
  if lr_ent_col is bound.
    lr_BuilNotesRel = lr_ent_col->get_first( ).
    while lr_BuilNotesRel is bound.
      lr_ent_col->remove( lr_BuilNotesRel ).
      lr_BuilNotesRel->delete( ).
      lr_BuilNotesRel = lr_ent_col->get_first( ).
    endwhile.
  endif.

             if lv_comment is not initial.
               lr_BuilNotesRel = lr_builheader->create_related_entity( 'BuilNotesRel' ).
               if lr_BuilNotesRel is bound.
                  lr_BuilNotesRel->switch_to_change_mode( ).
                  lr_BuilNotesRel->set_property( iv_attr_name = 'TDLINE'   iv_value = lv_comment ).
                  lr_BuilNotesRel->set_property( iv_attr_name = 'TASK'     iv_value = 'M' ).
                  lr_BuilNotesRel->set_property( iv_attr_name = 'TEXT_ID'  iv_value = '0001' )."cl_bupa_il_notes=>get_default_text_id( ) )."lv_text_id  ). "'0001'
                  lr_BuilNotesRel->set_property( iv_attr_name = 'LANGU'    iv_value = 'RU' ).
                  lr_BuilNotesRel->set_property( iv_attr_name = 'LANGUISO' iv_value = 'RU' ).
                  lr_BuilNotesRel->set_property( iv_attr_name = 'TDFORMAT' iv_value = '*' ).
               endif.
             endif.
******************************  ТЕЛЕФОНЫ (КОНЕЦ) *******************************************************************

             lr_core->modify( ).
*             if lr_transaction->check_save_possible( ) EQ abap_true.
                if lr_transaction->save( ) eq abap_true and
                   LV_COMMIT eq 'X'.
                   lr_transaction->commit( abap_false ).
                   <ls_cli_fiz>-PROCESSED = '1'. " 'OK'
                else.
                   lr_transaction->revert( ).
                   lr_transaction->rollback( ).
                   <ls_cli_fiz>-PROCESSED = '2'. " 'ERROR'.
                   <ls_cli_fiz>-ZRESULT_MSG = 'Произошел откат сохранения ДП'.
                   lv_comment = 'Произошел откат сохранения ДП'.
                endif.
*             else.
*                ev_result = 'ERROR'.
*                lv_error = 'Невозможно сохранить ДП'.
*                append lv_error to et_error.
*                return.
*             endif.
            if <ls_cli_fiz>-PROCESSED = '1'.
                CLEAR: ls_zbut000_ext,lv_fatca.
*                select single *
*                into corresponding fields of ls_zbut000_ext
*                from zbut000_ext
*                where partner = lv_partner.
                ls_zbut000_ext-partner     = lv_partner.
                ls_zbut000_ext-zbirthplace = <ls_cli_fiz>-BIRTHPLACE.
                ls_zbut000_ext-zpdl        = 2. " По умолчанию - "Не является"


                lv_fatca = <ls_cli_fiz>-FATCASTATUS.
                if   lv_fatca = '20'
                  or lv_fatca = '30'.
                       ls_zbut000_ext-FATCA_STATUS = lv_fatca.
                       ls_zbut000_ext-FATCA_PRINT  = 'X'.
                endif.

                modify zbut000_ext from ls_zbut000_ext.

                "ИНН
*                if    <ls_cli_fiz>-INN           is NOT INITIAL
*                  and strlen( <ls_cli_fiz>-INN ) > 2.
*                      ls_dfkkbptaxnum-PARTNER = lv_partner.
*                      ls_dfkkbptaxnum-TAXTYPE = 'RU1'.
*                      ls_dfkkbptaxnum-TAXNUM  = <ls_cli_fiz>-INN.
*                      MODIFY DFKKBPTAXNUM from ls_dfkkbptaxnum.
*                endif.

*                try.
*                     CLEAR ls_cfm.
*                     EXEC SQL.
*                         select nvl(to_char(trunc(max(TO_TIMESTAMP_TZ(date_time, 'Mon DD YYYY HH24:MI:SS  TZD'))),'yyyymmdd'),'00000000') date_time
*                         into :ls_cfm-ZDT_FILL
*                         FROM dev_user.z_p1_z_info
*                         where F_CLIENT = :<ls_cli_fiz>-F_CLIENT
*                           and (    descr_1 = 'Дата заполнения анкеты (досье) клиента'
*                                 or descr_1 = 'Дата изменения анкеты'
*                               )
*                     ENDEXEC.
*                     if    sy-subrc = 0
*                       and ls_cfm-zdt_fill is not initial.
*
*                        ls_cfm-PARTNER = lv_partner.
*                        ls_cfm-ZISEXTREMIST = '2'.
*                        MODIFY ZUBRR_DM_CFM FROM ls_cfm.
**                       ------------------------------------
*                     endif.
*                catch cx_sy_native_sql_error into lr_sql_error.
*                     lv_error = lr_sql_error->sqlmsg.
*                     concatenate lv_comment 'Ошибка(z_p1_docum 01):'
*                                 lv_error
*                                 cl_abap_char_utilities=>cr_lf
*                     into lv_comment
*                     SEPARATED BY space.
*                catch cx_root into lr_error.
*                     lv_error = lr_error->if_message~GET_LONGTEXT( )."get_text( ).
*                     concatenate lv_comment
*                                 'Ошибка(z_p1_docum 02):'
*                                 lv_error
*                                 cl_abap_char_utilities=>cr_lf
*                     into lv_comment
*                     SEPARATED BY space.
*                endtry.
*                commit work.
            endif."<ls_cli_fiz>-ZRESULT = 'OK'.

         endif."if lr_builheader is not b
*         get time stamp field <ls_cli_fiz>-ztimestamp.
         <ls_cli_fiz>-ZRESULT_MSG = lv_comment.
         MODIFY ZTB_PRTNRDAT_OLP from <ls_cli_fiz>.
         commit work and wait.
**         ls_zbut-PARTNER      = lv_partner.
**         if <ls_cli_fiz>-FLAG_BD = 0.
**            ls_zbut-ZZNIUOLTPA   = 'FLFL'.
**            ls_zbut-ZZOUIUOLTPAO = 'FLFL'.
**         else.
**            ls_zbut-ZZNIUOLTPA   = 'FLUL'.
**            ls_zbut-ZZOUIUOLTPAO = 'FLUL'.
**         endif.
**         ls_zbut-ZZUOA        = <ls_cli_fiz>-F_CLIENT + 100000.
**         CONDENSE ls_zbut-ZZUOA.
**         ls_zbut-ZZAOUUAAUI   = 'X'.
**         MODIFY ZBUT0000000001 FROM ls_zbut.
*        ------------------------------------

      endloop."lt_cli_fiz[] assigning <ls_cli_fiz>.
*      commit work.
    EV_RESULT = 'OK'.
  else.
      data:lv_str1 TYPE string,
           lv_str2 TYPE string.
      lv_str1 = '1'. " IV_CONSIGNMENT_NUM.
      lv_str2 = IV_PROC_NUM.
      concatenate 'Не выбрано записей, удовлетворяющих условиям:' 'партия='
                  lv_str1 ' № процесса=' lv_str2 ' Поле результа пусто'
             into EV_RESULT
      separated by space.

*      write: EV_RESULT.
  endif." lt_cli_fiz[] is not initial.



ENDFUNCTION.