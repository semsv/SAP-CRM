*&---------------------------------------------------------------------*
*& Include ZP_SSV_PRTNRDAT_EDIT_TAB_TOP                      Report ZP_SSV_PRTNRDAT_EDIT_TAB
*&
*&---------------------------------------------------------------------*

REPORT   ZP_SSV_PRTNRDAT_EDIT_TAB.
TYPE-POOLS: vrm.

class lcl_events_d0100 definition deferred.

DATA:
  gr_container_d0100   type ref to cl_gui_custom_container
  ,gr_grid_d0100       type ref to cl_gui_alv_grid
  ,gr_events_d0100     type ref to lcl_events_d0100
  ,gv_next_screen      type i
  ,GT_INDEX_ROWS       type LVC_T_ROW
  ,GT_ROW_NO           type LVC_T_ROID
  ,gt_fcat             type lvc_t_fcat  " Для настройки полей (имена, размер, доступ редакт и тд)
  ,gv_err_logic        type ABAP_BOOL   " Для логирования ошибок
  ,gv_dialog_handle    type balloghndl
  ,gr_dialog           type ref to CL_GUI_DIALOGBOX_CONTAINER
  ,gv_show_warning     type char1 value 'X'
  .

types: begin of g_ty_s_scr_opt,
         edit_mode         type i,
       end of g_ty_s_scr_opt.

data:
  gt_main_out_tab      type standard table of ZTB_PRTNRDAT_OLP, " Таблица основных данных ДП

  gt_doc_out_tab       type standard table of ZTB_DOCDATA_OLP,  " Таблица документы
  gt_addr_out_tab      type standard table of ZTB_ADDRDAT_OLP,  " Таблица адреса
  gt_tel_out_tab       type standard table of ZTB_TELNEDAT_OLP, " Таблица телефонов

  gt_main_out_tab_cmp  type standard table of ZTB_PRTNRDAT_OLP, " Таблица основных данных ДП

  gt_doc_out_tab_cmp   type standard table of ZTB_DOCDATA_OLP,  " Таблица документы
  gt_addr_out_tab_cmp  type standard table of ZTB_ADDRDAT_OLP,  " Таблица адреса
  gt_tel_out_tab_cmp   type standard table of ZTB_TELNEDAT_OLP, " Таблица телефонов

  gs_main_out_tab_edt  type ZTB_PRTNRDAT_OLP,                   " Редактируемая запись
  gs_screen_option     type g_ty_s_scr_opt.

constants: con_true              type char1     value 'X',
           con_exit              type sy-ucomm  value 'ВЫХОД',
           con_canc              type sy-ucomm  value 'ОТМЕНА',
           con_back              type sy-ucomm  value 'НАЗАД',
           con_save              type sy-ucomm  value 'СОХРАНИТЬ',
           con_docedit           type sy-ucomm  value 'DOCUMENT',
           con_addredit          type sy-ucomm  value 'ADDRESS',
           con_telephonedit      type sy-ucomm  value 'TELEPHONE',
           con_str               type lvc_fname value 'ZTB_PRTNRDAT_OLP',
           con_on                type char1     value '1',
           con_off               type char1     value '0',
           grid_mode_display     type i         value 0,
           grid_mode_change      type i         value 1,
           con_edit_mode_display type i         value 1,
           con_edit_mode_change  type i         value 2
           .

data: g_okcode type sy-ucomm.


*---------------------------------------------------------------------*
*       CLASS lcl_events_d0100 DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
class lcl_events_d0100 definition.
  public section.
    methods:
    onf4
                         for event ONF4
                         of cl_gui_alv_grid
                         importing E_FIELDNAME
                                   E_FIELDVALUE
                                   ES_ROW_NO
                                   ER_EVENT_DATA
                                   ET_BAD_CELLS
                                   E_DISPLAY, "#EC CALLED

    double_click         for event double_click
                         of cl_gui_alv_grid
                         importing e_row
                                   e_column
                                   es_row_no, "#EC CALLED

    hotspot_click        for event hotspot_click
                         of cl_gui_alv_grid
                         importing e_row_id
                                   e_column_id
                                   es_row_no, "#EC CALLED

    button_click         for event button_click
                         of cl_gui_alv_grid
                         importing es_col_id
                                   es_row_no, "#EC CALLED

    data_changed         for event data_changed
                         of cl_gui_alv_grid
                         importing er_data_changed
                                   e_onf4
                                   e_onf4_before
                                   e_onf4_after, "#EC CALLED

    data_changed_finished
                         for event data_changed_finished
                         of cl_gui_alv_grid, "#EC CALLED

    on_close_log
                         for event close
                         of CL_GUI_DIALOGBOX_CONTAINER,

    on_close_dialog
                         for event close
                         of CL_GUI_DIALOGBOX_CONTAINER.

endclass.                    "lcl_events_d0100 DEFINITION
*---------------------------------------------------------------------*
*       CLASS lcl_events_d0100 IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
class lcl_events_d0100 implementation.
*---------------------------------------------------------------------*
*       METHOD double_click                                           *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
  method double_click.
    perform d0100_event_double_click using e_row
                                           e_column.
  endmethod.                    "double_click

*---------------------------------------------------------------------*
*       METHOD hotspot_click                                          *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
  method hotspot_click.
    perform d0100_event_hotspot_click using e_row_id
                                            e_column_id
                                            es_row_no.
  endmethod.                    "hotspot_click

*---------------------------------------------------------------------*
*       METHOD button_click                                           *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
  method button_click.
    perform d0100_event_button_click using es_col_id
                                           es_row_no.
  endmethod.                    "button_click

  method data_changed.
    perform d0100_event_data_changed using er_data_changed
                                           e_onf4
                                           e_onf4_before
                                           e_onf4_after.
  endmethod.                    "data_changed

  method data_changed_finished.
    perform d0100_event_data_changed_finis.
  endmethod.                    "data_changed_finished

  method ONF4.
    perform d0100_event_onf4 using E_FIELDNAME
                                   E_FIELDVALUE
                                   ES_ROW_NO
                                   ER_EVENT_DATA
                                   ET_BAD_CELLS
                                   E_DISPLAY.
  endmethod.                    "ONF4

  method on_close_log.
    perform on_close_log.
  endmethod.

  method on_close_dialog.
    perform on_close_dialog.
  endmethod.
endclass.                    "lcl_events_d0100 IMPLEMENTATION

form on_close_dialog.
  call method gr_dialog->free.
  clear gr_dialog.
  clear gv_dialog_handle.
endform.

selection-screen begin of block base_options with frame title text-100.

  parameters: lv_sysid  TYPE ZED_SSV_OLP_SYSTEMS_ID AS LISTBOX VISIBLE LENGTH 60 obligatory.
  parameters: lv_augrp  TYPE BU_AUGRP AS LISTBOX VISIBLE LENGTH 60 OBLIGATORY.
  parameters: lvprcssd  TYPE CHAR1 AS LISTBOX VISIBLE LENGTH 60.
  parameters: lv_prcss  TYPE ZED_SSV_BPL_PROCESSNUMBER.


selection-screen end of block base_options.

AT SELECTION-SCREEN OUTPUT.
" Начало: создаем элемент раскрывающийся список
data:
  name            TYPE vrm_id,
  list            TYPE vrm_values,
  value           LIKE LINE OF list.

  clear list[].
  data:
    ls_olpsyst_ctlg TYPE ZTB_OLPSYST_CTLG,
    lt_olpsyst_ctlg TYPE STANDARD TABLE OF ZTB_OLPSYST_CTLG.

  select *
    into table lt_olpsyst_ctlg
    from ZTB_OLPSYST_CTLG.

  LOOP AT lt_olpsyst_ctlg INTO ls_olpsyst_ctlg.
    value-key  = ls_olpsyst_ctlg-ID.
    value-text = ls_olpsyst_ctlg-NAME.
    append value to list.
  ENDLOOP.

 name = 'lv_sysid'.
 CALL FUNCTION 'VRM_SET_VALUES' EXPORTING id = name values = list.
" Конец: создаем элемент раскрывающийся список

" Начало: создаем элемент раскрывающийся список
 clear list[].
 data:
   lt_augrp type standard table of ZTB_OLPCREATEREP,
   ls_augrp type ZTB_OLPCREATEREP.

 select *
   into corresponding fields of table lt_augrp
   from TB037  as a
   join TB037T as b
     on a~AUOBJ = b~AUOBJ
    and a~AUGRP = b~AUGRP.

  LOOP AT lt_augrp INTO ls_augrp.
    value-key  = ls_augrp-AUGRP.
    value-text = ls_augrp-BEZ50.
    append value to list.
  ENDLOOP.

 name = 'lv_augrp'.
 CALL FUNCTION 'VRM_SET_VALUES' EXPORTING id = name values = list.
" Конец: создаем элемент раскрывающийся список

 " Начало: создаем элемент раскрывающийся список
 clear list[].
 data:
   lt_prccsd type standard table of ZTB_OLP_MSG_CTLG,
   ls_prccsd type ZTB_OLP_MSG_CTLG.

 select *
   into corresponding fields of table lt_prccsd
   from ZTB_OLP_MSG_CTLG.

  LOOP AT lt_prccsd INTO ls_prccsd.
* Исключаем из выбора пункт "Обработано успешно"
* Такие записи редактировать нельзя т.к этот флаг означает что мы уже создавали клиента по этим данным и эта строка нужна как отчет о создании ДП
    if ls_prccsd-PROCESSED EQ 1.
      continue.
    endif.
    value-key  = ls_prccsd-PROCESSED.
    value-text = ls_prccsd-DESCRIPTION.
    append value to list.
  ENDLOOP.

 value-key  = 'X'.
 value-text = 'Все'.
 append value to list.

 name = 'lvprcssd'.
 CALL FUNCTION 'VRM_SET_VALUES' EXPORTING id = name values = list.
" Конец: создаем элемент раскрывающийся список

 START-OF-SELECTION.

  DATA: lt_olpcreaterep TYPE STANDARD TABLE OF ZTB_OLPCREATEREP,
        ls_olpcreaterep TYPE ZTB_OLPCREATEREP.

   if lvprcssd is initial.
     lvprcssd = 'X'.
   endif.

   if lv_prcss is initial.
     select *
       into table lt_olpcreaterep
       from ZTB_OLPCREATEREP
      where AUGRP            = lv_augrp
        and SYSTEMID         = lv_sysid.
   else.
     select *
       into table lt_olpcreaterep
       from ZTB_OLPCREATEREP
      where AUGRP            = lv_augrp
        and SYSTEMID         = lv_sysid
        and PROCESS_NUMBER   = lv_prcss.
   endif.

   clear gt_main_out_tab.
   loop at lt_olpcreaterep into ls_olpcreaterep.
     lv_prcss = ls_olpcreaterep-PROCESS_NUMBER.
     if lvprcssd = 'X'.
       select *
         appending table gt_main_out_tab
         from ZTB_PRTNRDAT_OLP
        where PROCESS_NUMBER = lv_prcss    " Номер процесса
          and SYSTEMID       = lv_sysid.   " Уникальный идентификатор системы портф проср ссуд
     else.
       select *
         appending table gt_main_out_tab
         from ZTB_PRTNRDAT_OLP
        where PROCESS_NUMBER = lv_prcss    " Номер процесса
          and SYSTEMID       = lv_sysid    " Уникальный идентификатор системы портф проср ссуд
          and PROCESSED      = lvprcssd.
     endif.
   endloop.
   gt_main_out_tab_cmp[] = gt_main_out_tab[].
*----------------------------------------------------------------------*
* END-OF-SELECTION                                                     *
*----------------------------------------------------------------------*
end-of-selection.
  call screen 100.


*&---------------------------------------------------------------------*
*&      Form  d0100_prepare_container
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_prepare_container .

  data: lt_fcat             type lvc_t_fcat,
        ls_fcat             type lvc_s_fcat,
        ls_layo             type lvc_s_layo,
        ls_vari             type disvariant,
        ls_prnt             type lvc_s_prnt,
        lt_hype             type lvc_t_hype,
        l_consistency_check type char1.

  if gr_container_d0100 is initial.
    if cl_gui_alv_grid=>offline( ) is initial.
      create object gr_container_d0100
                    exporting container_name = 'D0100_CONTAINER'.
    endif.

    create object gr_grid_d0100
                  exporting i_parent = gr_container_d0100.

    perform d0100_set_grid_fcat changing lt_fcat. gt_fcat[] = lt_fcat[].
    perform d0100_set_grid_events.

    call method gr_grid_d0100->set_ready_for_input
      exporting
        i_ready_for_input = grid_mode_display.

    gs_screen_option-edit_mode = con_edit_mode_display.

    call method gr_grid_d0100->set_table_for_first_display
      exporting
        i_structure_name    = con_str
        i_save              = 'A'
        i_default           = con_true
        is_layout           = ls_layo
      changing
        it_outtab           = gt_main_out_tab[]
        it_fieldcatalog     = lt_fcat
        .
  endif.

endform.                    " d0100_prepare_container

module d0100_prepare_container output.
  perform d0100_prepare_container.
endmodule.                 " d0100_prepare_container  OUTPUT

form d0100_set_status .

  types: begin of l_ty_s_excl,
           func type syucomm,
         end   of l_ty_s_excl,
         l_ty_t_excl type standard table of l_ty_s_excl.

  data: lt_excl type l_ty_t_excl.

  set pf-status 'D0100' excluding lt_excl.
  set titlebar 'D0100'.

endform.                    " d0100_set_status

module d0100_set_status output.
  perform d0100_set_status.
endmodule.                 " d0100_set_status  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  d0100_set_grid_fcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_set_grid_fcat changing ct_fcat type lvc_t_fcat.

  data: ls_fcat type lvc_s_fcat,
        l_lin   type i.

  field-symbols: <fs_fcat> type lvc_s_fcat.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      i_buffer_active        = ' ' " gs_test-buffer_active
      i_structure_name       = con_str
      i_client_never_display = con_true
      i_bypassing_buffer     = ' ' " gs_test-bypassing_buffer
    changing
      ct_fieldcat            = ct_fcat[]
    exceptions
      inconsistent_interface = 1
      program_error          = 2
      others                 = 3.
  if sy-subrc <> 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.
***************************************************************
*****   Настройка вывода названий полей в таблице (нач.)  *****
***************************************************************
  loop at ct_fcat assigning <fs_fcat>.
    clear <fs_fcat>-edit.
    <fs_fcat>-OUTPUTLEN = 15.
    if <fs_fcat>-fieldname eq 'EXTERNAL_ID'.
      <fs_fcat>-outputlen = 10.
    endif.
    if <fs_fcat>-fieldname eq 'SYSTEMID'.
      <fs_fcat>-outputlen = 10.
    endif.
    if <fs_fcat>-fieldname eq 'CLIENTKIND'.
       <fs_fcat>-scrtext_s  = 'Тип клиент'.  " Короткое 10 симв
       <fs_fcat>-scrtext_m  = 'Тип клиента'. " Среднее 20 симв
       <fs_fcat>-scrtext_l  = 'Тип клиента'. " Длинное 40 символов
       <fs_fcat>-seltext    = 'Тип клиент'.  " Ид для диалоговых окон 40 симв
       <fs_fcat>-edit       = 'X'.
       <fs_fcat>-F4AVAILABL = 'X'.
       <fs_fcat>-outputlen  = 10.
    endif.
    if <fs_fcat>-fieldname eq 'PROCESSED'.
       <fs_fcat>-scrtext_s  = 'Тип записи'.
       <fs_fcat>-scrtext_m  = 'Тип записи'.
       <fs_fcat>-scrtext_l  = 'Тип записи'.
*       <fs_fcat>-edit       = 'X'. " Исключил из доступного для редактирования т.к. поле служебное опр логику работы различных проверок, должно заполняться только программно
       <fs_fcat>-F4AVAILABL = 'X'. " Взведение этого флажка позволило вывести кустомное средство поиска подключенное ранее к таблице выводимой в гриде
       <fs_fcat>-outputlen  = 10.
    endif.
    if <fs_fcat>-fieldname eq 'FIRSTNAME'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'LASTNAME'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'MIDDLENAME'.
      <fs_fcat>-scrtext_s = 'Отчество'.
      <fs_fcat>-scrtext_m = 'Отчество'.
      <fs_fcat>-scrtext_l = 'Отчество'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'NICKNAME'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'BIRTHNAME'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'FULLNAME'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'BIRTHPLACE'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'SEX'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'BIRTHDATE'.
      <fs_fcat>-edit      = 'X'.
    endif.

    if <fs_fcat>-fieldname eq 'QUESTION_BKI'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'ANSWER_BKI'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'MARITALSTATUS'.
      <fs_fcat>-edit       = 'X'.
      <fs_fcat>-F4AVAILABL = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'NATIONALITY'.
      <fs_fcat>-edit       = 'X'.
      <fs_fcat>-F4AVAILABL = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'FATCASTATUS'.
      <fs_fcat>-edit      = 'X'.
    endif.
    if <fs_fcat>-fieldname eq 'E_MAIL'.
      <fs_fcat>-edit      = 'X'.
    endif.

    if <fs_fcat>-fieldname eq 'ZRESULT_MSG'.
       <fs_fcat>-scrtext_s = 'Рез. обраб'.
       <fs_fcat>-scrtext_m = 'Результат обработки'.
       <fs_fcat>-scrtext_l = 'Результат обработки'.
    endif.
  endloop.
***************************************************************
*****   Настройка вывода названий полей в таблице (кон.)  *****
***************************************************************
endform.


*&---------------------------------------------------------------------*
*&      Form  d0100_exit
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_exit .

  data: l_okcode like sy-ucomm.

  l_okcode = g_okcode.
  clear g_okcode.

  case l_okcode.
    when con_exit or con_back or con_canc.
      call method gr_grid_d0100->free.
      call method gr_container_d0100->free.

      call method cl_gui_cfw=>flush.

      clear gr_container_d0100.
      clear gr_grid_d0100.
      clear gr_events_d0100.

      set screen gv_next_screen.
      leave screen.
  endcase.

endform.                    " d0100_exit

*&---------------------------------------------------------------------*
*&      Module  d0100_exit  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module d0100_exit input.
  perform d0100_exit.
endmodule.                 " d0100_exit  INPUT

form check_data_change using ev_flg_change type char1.
  data:
    ls_main_data     type ZTB_PRTNRDAT_OLP,
    ls_main_data_cmp type ZTB_PRTNRDAT_OLP.

  clear ev_flg_change.
  loop at gt_main_out_tab_cmp into ls_main_data.
    read table gt_main_out_tab
      INTO ls_main_data_cmp
      WITH KEY CLIENT      = ls_main_data-CLIENT
               EXTERNAL_ID = ls_main_data-EXTERNAL_ID
               SYSTEMID    = ls_main_data-SYSTEMID.
    if sy-subrc ne 0.
* суда попадаем если пользователь удалил одну или несколько записей
      ev_flg_change = 'X'.
    else.
      if ls_main_data_cmp <> ls_main_data.
* суда попадаем если что то поменялось в самих данных
        ev_flg_change = 'X'.
      endif.
    endif.
  endloop.

endform.

form save_data.
  data: lv_flg_change type char1.
  perform check_data_change using lv_flg_change.
  if lv_flg_change eq 'X'.
    modify ZTB_PRTNRDAT_OLP from table gt_main_out_tab.
    commit work and wait.
    message i000(0k) with 'Данные успешно сохранены'.
    gt_main_out_tab_cmp[] = gt_main_out_tab[].
  endif.
endform.                   " save_data

form save_data_doc.
* Начало: Обработка для создания новых записей
  field-symbols: <fs_doc_out_tab> type ZTB_DOCDATA_OLP,
                 <fs_main_data> type ZTB_PRTNRDAT_OLP.
*--->>> ubrr 16.09.2019 Севастьянов С.В. #66416  [18-54941.1] Покупка портфеля просроченных ссуд (разработка)
  data: ls_doc_out_tab_cmp type ZTB_DOCDATA_OLP,
        lv_update_main_rec type char1,
        lv_error_flg       type char1,
        lv_data_change_flg type char1,
        lv_main_doc_flg    type char1,
        LV_PARTNER         type bu_partner,
        LT_DOCUMENT        type standard table of ZTB_DOCDATA_OLP,
        lv_cnt             type I.
*---<<< ubrr 16.09.2019 Севастьянов С.В. #66416  [18-54941.1] Покупка портфеля просроченных ссуд (разработка)
  clear lv_error_flg.
  clear lv_data_change_flg.
  LT_DOCUMENT[] = gt_doc_out_tab[].
  loop at gt_doc_out_tab assigning <fs_doc_out_tab>.
    if <fs_doc_out_tab>-EXTERNAL_ID is initial or
       <fs_doc_out_tab>-SYSTEMID    is initial.
      <fs_doc_out_tab>-CLIENT         = gs_main_out_tab_edt-CLIENT.
      <fs_doc_out_tab>-EXTERNAL_ID    = gs_main_out_tab_edt-EXTERNAL_ID.
      <fs_doc_out_tab>-SYSTEMID       = gs_main_out_tab_edt-SYSTEMID.
      <fs_doc_out_tab>-PROCESS_NUMBER = gs_main_out_tab_edt-PROCESS_NUMBER.
    endif.
*--->>> ubrr 16.09.2019 Севастьянов С.В. #66416  [18-54941.1] Покупка портфеля просроченных ссуд (разработка)
* Узнаем изменились ли какие нибудь поля
      read table gt_doc_out_tab_cmp
      INTO ls_doc_out_tab_cmp
      WITH KEY CLIENT      = <fs_doc_out_tab>-CLIENT
               EXTERNAL_ID = <fs_doc_out_tab>-EXTERNAL_ID
               SYSTEMID    = <fs_doc_out_tab>-SYSTEMID
               TYPEDOC     = <fs_doc_out_tab>-TYPEDOC
               SERIALDOC   = <fs_doc_out_tab>-SERIALDOC
               NUMBERDOC   = <fs_doc_out_tab>-NUMBERDOC.
      if sy-subrc ne 0.
        lv_data_change_flg = 'X'.
* Суда попадаем если есть какие то изменения
        CALL FUNCTION 'ZFM_UTL_SSV_PROCESS_RECDOC_OLP'
          EXPORTING IS_DOCDATA_OLP = <fs_doc_out_tab>
          IMPORTING EV_ERROR       = lv_error_flg
             TABLES CT_CLIENT      = gt_main_out_tab
                    CT_DOCUMENT    = LT_DOCUMENT.
        IF lv_error_flg EQ 'X'.
          lv_update_main_rec = 'X'.
          EXIT.
        ENDIF.
*        CALL FUNCTION 'ZFM_UTL_SSV_GET_COUNT_DOC'
*          EXPORTING IS_DOCDATA_OLP = <fs_doc_out_tab>
*          IMPORTING EV_COUNT       = LV_CNT
*                    EV_PARTNER     = LV_PARTNER.
** Если найден такой документ то
** Если это основной документ и в случае если отличается ФИО и/или дата рождения - формируем ошибка "дубликат документа"
** Если это основной документ и в случае если совпали ФИО и дата рождения - маркируем как "Старый ДП" - ошибок и предупреждений нет
** Если это не основной документ маркируем как предупреждение "дубликат неосновного документа"
*        IF LV_CNT > 0.
**          <fs_doc_out_tab>-MARKER_ID    = LV_CNT. " Устанавливаем маркер ошибки
**          <fs_doc_out_tab>-EXTPROCESSED = 0.      " Сброс метки записи
*          READ TABLE gt_main_out_tab
*             ASSIGNING <fs_main_data>
*             WITH KEY CLIENT      = <fs_doc_out_tab>-CLIENT
*                      EXTERNAL_ID = <fs_doc_out_tab>-EXTERNAL_ID
*                      SYSTEMID    = <fs_doc_out_tab>-SYSTEMID.
*          IF SY-SUBRC EQ 0.
*            CLEAR lv_main_doc_flg.
** Если проверяем основной документ, то установим (взведем) флажок lv_main_doc_flg
*            IF <fs_doc_out_tab>-TYPEDOC EQ '21'.
*              select SINGLE p~PARTNER
*                into LV_PARTNER
*                from but000 as p
*                join BUT0ID as i on i~partner  eq p~partner
*                 and i~IDNUMBER eq <fs_doc_out_tab>-NUMBERDOC
*               where p~NAME_LAST   eq <fs_main_data>-LASTNAME
*                 and p~NAME_FIRST  eq <fs_main_data>-FIRSTNAME
*                 and p~NAMEMIDDLE  eq <fs_main_data>-MIDDLENAME
*                 and ( p~BIRTHPL   eq <fs_main_data>-BIRTHPLACE or
*                       p~BIRTHDT   eq <fs_main_data>-BIRTHDATE
*                      )
*                 and i~type     IN ('21', 'N21').
*              IF SY-SUBRC EQ 0.
*                LV_CNT = 1.
*              ELSE.
*                LV_CNT = 0.
*              ENDIF.
*              lv_main_doc_flg = 'X'.
*            ENDIF.
*
*              IF LV_CNT EQ 0 AND lv_main_doc_flg EQ 'X'.
*                <fs_main_data>-MARKER_ID      = 1. " 1 - Маркер "дубликат документа"
*                <fs_main_data>-PROCESSED      = 2.
*                <fs_main_data>-ZRESULT_MSG    = 'Ошибка: дубликат документа'.
*                <fs_main_data>-ZRES_PARTNER   = LV_PARTNER.
*                <fs_doc_out_tab>-MARKER_ID    = 0. " Сброс маркер ошибки
*                <fs_doc_out_tab>-EXTPROCESSED = 0. " Сброс метки записи
*                lv_error_flg                  = 'X'.
*              ELSEIF lv_main_doc_flg NE 'X' AND
*                     <fs_doc_out_tab>-EXTPROCESSED EQ 0. " Если эта запись уже обработана пользователем (EXTPROCESSED NE 0),- то не трогаем
*                <fs_main_data>-MARKER_ID    = 1.
*                <fs_main_data>-PROCESSED    = 3. " Предупреждение
*                <fs_main_data>-ZRESULT_MSG  = 'Предупреждение: дубликат не основного документа'.
*                <fs_main_data>-ZRES_PARTNER = LV_PARTNER.
*                <fs_doc_out_tab>-MARKER_ID  = 11. " Установка маркер ошибки (дубликат не основного документа)
*              ELSEIF LV_CNT > 0 AND lv_main_doc_flg EQ 'X'.
** Старый ДП
*                <fs_main_data>-MARKER_ID    = 10. " 10 - Маркер "Старый ДП"
*                <fs_main_data>-PROCESSED    = 2.
*                <fs_main_data>-ZRESULT_MSG  = 'Старый ДП'.
*                <fs_main_data>-ZRES_PARTNER = LV_PARTNER.
*                lv_error_flg                = 'X'.
*              ENDIF.
**            <fs_main_data>-EXTPROCESSED = 0.
*            lv_update_main_rec          = 'X'.
*            IF lv_error_flg EQ 'X'.
*              EXIT. " Выход из цикла
*            ENDIF.
*          ENDIF.
** Иначе сбрасываем маркер если он есть
*        ELSE.
*          IF <fs_doc_out_tab>-MARKER_ID NE 0.
*            <fs_doc_out_tab>-MARKER_ID    = LV_CNT. " Сбросили флаг ошибки
*            <fs_doc_out_tab>-EXTPROCESSED = 0.      " Сброс метки записи
*            READ TABLE gt_main_out_tab
*              ASSIGNING <fs_main_data>
*              WITH KEY CLIENT      = <fs_doc_out_tab>-CLIENT
*                       EXTERNAL_ID = <fs_doc_out_tab>-EXTERNAL_ID
*                       SYSTEMID    = <fs_doc_out_tab>-SYSTEMID.
*            IF SY-SUBRC                   EQ 0 AND
*               <fs_main_data>-MARKER_ID   NE 0. " AND
**               <fs_main_data>-PROCESSED   EQ 2 AND " 2 - Ошибка
**               <fs_main_data>-ZRESULT_MSG CP '*дубликат документа*'.
** Сбросили информацию о ошибки в основной таблице
*              <fs_main_data>-MARKER_ID    = 0.
*              <fs_main_data>-PROCESSED    = 0.
*              <fs_main_data>-ZRESULT_MSG  = ''.
*              <fs_main_data>-ZRES_PARTNER = ''.
**              <fs_main_data>-EXTPROCESSED = 0.
*              lv_update_main_rec          = 'X'.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*---<<< ubrr 16.09.2019 Севастьянов С.В. #66416  [18-54941.1] Покупка портфеля просроченных ссуд (разработка)
    endif.
  endloop.
* Конец: Обработка для создания новых записей
*
  IF lv_error_flg EQ 'X'.
    gt_doc_out_tab[] = LT_DOCUMENT[].
  ENDIF.
*
  delete ZTB_DOCDATA_OLP from table gt_doc_out_tab_cmp.
  insert ZTB_DOCDATA_OLP from table gt_doc_out_tab.
  if lv_update_main_rec EQ 'X'.
    modify ZTB_PRTNRDAT_OLP from table gt_main_out_tab.
    gt_main_out_tab_cmp[] = gt_main_out_tab[].
  else.
* Поиск и маркировка по телефонам
  endif.
  gt_doc_out_tab_cmp[] = gt_doc_out_tab[].
  commit work and wait.

  if lv_error_flg EQ 'X'.
    message w000(Ok) with 'Данные сохранены, но некотор. записи были помечены'.
  else.
    if lv_data_change_flg EQ 'X'.
      message i000(0k) with 'Данные успешно сохранены'.
    else.
      message i000(0k) with 'Нет изменений в данных'.
    endif.
  endif.

endform.                   " save_data_doc

form save_data_addr.
* Начало: Обработка для создания новых записей
  field-symbols: <fs_addr_out_tab> type ZTB_ADDRDAT_OLP.
  loop at gt_addr_out_tab assigning <fs_addr_out_tab>.
    if <fs_addr_out_tab>-EXTERNAL_ID is initial or
       <fs_addr_out_tab>-SYSTEMID    is initial.
      <fs_addr_out_tab>-CLIENT         = gs_main_out_tab_edt-CLIENT.
      <fs_addr_out_tab>-EXTERNAL_ID    = gs_main_out_tab_edt-EXTERNAL_ID.
      <fs_addr_out_tab>-SYSTEMID       = gs_main_out_tab_edt-SYSTEMID.
      <fs_addr_out_tab>-PROCESS_NUMBER = gs_main_out_tab_edt-PROCESS_NUMBER.
    endif.
  endloop.
* Конец: Обработка для создания новых записей
  delete ZTB_ADDRDAT_OLP from table gt_addr_out_tab_cmp.
  insert ZTB_ADDRDAT_OLP from table gt_addr_out_tab.
  gt_addr_out_tab_cmp[] = gt_addr_out_tab[].
  commit work and wait.
  message i000(0k) with 'Данные успешно сохранены'.
endform.                   " save_data_addr

form save_data_telephone.
* Начало: Обработка для создания новых записей
  field-symbols: <fs_tel_out_tab> type ZTB_TELNEDAT_OLP.
  loop at gt_tel_out_tab assigning <fs_tel_out_tab>.
    if <fs_tel_out_tab>-EXTERNAL_ID is initial or
       <fs_tel_out_tab>-SYSTEMID    is initial.
      <fs_tel_out_tab>-CLIENT         = gs_main_out_tab_edt-CLIENT.
      <fs_tel_out_tab>-EXTERNAL_ID    = gs_main_out_tab_edt-EXTERNAL_ID.
      <fs_tel_out_tab>-SYSTEMID       = gs_main_out_tab_edt-SYSTEMID.
      <fs_tel_out_tab>-PROCESS_NUMBER = gs_main_out_tab_edt-PROCESS_NUMBER.
    endif.
  endloop.
* Конец: Обработка для создания новых записей
  delete ZTB_TELNEDAT_OLP from table gt_tel_out_tab_cmp.
  insert ZTB_TELNEDAT_OLP from table gt_tel_out_tab.
  gt_tel_out_tab_cmp[] = gt_tel_out_tab[].
  commit work and wait.
  message i000(0k) with 'Данные успешно сохранены'.
endform.                   " save_data_telephone

form check_data using iv_row_selected type LVC_S_ROW.
  data: lr_data_descr TYPE REF TO cl_abap_structdescr,
        ls_data       TYPE ZSTR_SSV_BPARTNER_LOADER,
        ls_main_data  type ZTB_PRTNRDAT_OLP,
        LV_INDEX      type i,
        lv_rowid      type i,
        lv_value_str(12) type c,
        lv_error_txt  type string.
  data: lv_err_txt1   type string,
        lv_err_txt2   type string,
        lv_err_txt3   type string,
        lv_err_txt4   type string.

  clear gv_err_logic.

  FIELD-SYMBOLS: <ls_component> LIKE LINE OF cl_abap_structdescr=>components,
                 <lv_value>     TYPE ANY.

  lr_data_descr ?= cl_abap_typedescr=>describe_by_data( ls_data ).
  loop at gt_main_out_tab into ls_main_data.

    if iv_row_selected-INDEX ne 0.
      read table gt_main_out_tab index iv_row_selected into ls_main_data.
    endif.

    lv_rowid = sy-tabix.
    move-corresponding ls_main_data to ls_data.
    ls_data-SMTP_ADDR = ls_main_data-e_mail.

    LOOP AT lr_data_descr->components ASSIGNING <ls_component>.
      ASSIGN COMPONENT <ls_component>-name OF STRUCTURE ls_data TO <lv_value>.
      LV_INDEX = sy-tabix.
      if <ls_component>-type_kind eq 'D'.
        if <lv_value> eq '00000000'.
          <lv_value> = ''.
        else.
          if <lv_value> is not initial.
            CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
              EXPORTING
                date_internal = <lv_value>
              IMPORTING
                date_external = lv_value_str
              EXCEPTIONS
                DATE_EXTERNAL_IS_INVALID = 1
                OTHERS                   = 2.
            <lv_value> = lv_value_str.
          endif.
        endif.
      endif.
      lv_value_str = <lv_value>.
      CALL FUNCTION 'ZFM_UTL_SSV_CHECK_FMT_LPRTNR'
        EXPORTING IV_INDEX     = LV_INDEX " Номер поля в CSV.
                  IV_VALUE     = <lv_value>
                  IV_TYPE_KIND = <ls_component>-type_kind
                  IV_COMPNAME  = <ls_component>-name
        IMPORTING EV_VALUE     = <lv_value>
                  EV_ERROR_TXT = lv_error_txt.
        IF lv_error_txt NE 'OK'.
*I_MSGID = ZCLMSG_UTL_OLP_JRERR
          lv_err_txt4 = lv_rowid.
          concatenate 'Ошибка формата ' ' '      into lv_err_txt1.
          concatenate 'значение: ' lv_value_str  into lv_err_txt2.
          concatenate 'строка: '   lv_err_txt4   into lv_err_txt3.

          perform add_protocol_entry using 'DB'
                                           'E'
                                           '000'
                                           lv_err_txt1
                                           lv_err_txt2
                                           lv_err_txt3
                                           ''
                                           <ls_component>-name
                                           lv_rowid
                                           0.

          gv_err_logic = 'X'.
          lv_error_txt = lv_error_txt.
        ENDIF.
        IF LV_INDEX >= 16.
          EXIT.
        ENDIF.
    ENDLOOP.
    if iv_row_selected-INDEX ne 0.
      exit.
    endif.
  endloop.
*  call method gr_grid_d0100->SET_ERROR_LOG
*    exporting IR_ALV =  gr_grid_d0100.
endform.

*&---------------------------------------------------------------------*
*&      Form  d0100_fcode
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_fcode .
  data:  ls_layo             type lvc_s_layo
        ,lv_flg_change       type char1
        ,l_okcode            like sy-ucomm
        ,lv_valid            type ABAP_BOOL
        ,ls_main_out_tab     type ZTB_PRTNRDAT_OLP
        ,ls_index_rows       type LVC_S_ROW.

  l_okcode = sy-ucomm. " g_okcode.
  clear g_okcode.

  case l_okcode.
*****************************************************
* Обработка событий от кнопок: ВЫХОД, НАЗАД, ОТМЕНА *
*****************************************************
    when con_exit or con_back or con_canc.
      if gv_show_warning eq 'X'.
        call method gr_grid_d0100->check_changed_data
          IMPORTING E_VALID = lv_valid.
        if lv_valid eq 'X'.
          perform check_data_change using lv_flg_change.
          if lv_flg_change eq 'X'.
            perform show_warning.
            clear gv_show_warning.
          endif.
          check lv_flg_change ne 'X'.
        else.
          exit.
        endif.
      endif.
*
      if l_okcode eq con_canc.
        gt_main_out_tab[] = gt_main_out_tab_cmp[].
        call method gr_grid_d0100->set_table_for_first_display
          exporting
            i_structure_name    = con_str
            i_save              = 'A'
            i_default           = con_true
            is_layout           = ls_layo
          changing
            it_outtab           = gt_main_out_tab[]
            it_fieldcatalog     = gt_fcat
          .
        gv_show_warning = 'X'.
      else.
        g_okcode = l_okcode.
        perform d0100_exit.
      endif.
*****************************************
* Обработка события от кнопки СОХРАНИТЬ *
*****************************************
    when con_save.
      call method gr_grid_d0100->check_changed_data
                    IMPORTING E_VALID = lv_valid.
      if lv_valid EQ 'X'.
* Проверяем введенные данные ф. check_data
        perform check_data using ls_index_rows.
* Если нет ошибок то сохраняем иначе показываем журнал ошибок
        if gv_err_logic = 'X'.
          perform display_protocol using 'X'
                                         'X'.
        else.
          perform save_data.
        endif.
      endif.
*******************************************************
* Обработка события от кнопки Редактировать документы *
*******************************************************
    when con_docedit.
* Узнаем какие строчки выделены
      call method gr_grid_d0100->GET_SELECTED_ROWS
        importing ET_INDEX_ROWS = GT_INDEX_ROWS
                  ET_ROW_NO     = GT_ROW_NO.
      if GT_INDEX_ROWS[] is initial.
        message e001(1) with 'Необходимо выделить строку ' 'для редактирования документов'.
        return.
      endif.
      loop at GT_INDEX_ROWS into ls_index_rows.
        exit.
      endloop.
************************************************************
* Далее проверим что на этом экране все данные сохранены   *
* Начало проверки                                          *
************************************************************
      call method gr_grid_d0100->check_changed_data
        IMPORTING E_VALID = lv_valid.
      check lv_valid EQ 'X'.
* Проверяем введенные данные ф. check_data
        perform check_data using ls_index_rows.
* Если нет ошибок то сохраняем иначе показываем журнал ошибок
        if gv_err_logic = 'X'.
          perform display_protocol using 'X'
                                         'X'.
          exit.
        else.
          perform save_data.
        endif.
************************************************************
* проверим что на этом экране все данные сохранены         *
* Конец проверки                                           *
***************************************** ******************

* Начало: Заполняем таблицу gt_doc_out_tab
      clear gt_doc_out_tab.
      loop at GT_INDEX_ROWS into ls_index_rows.
        exit.
      endloop.

        read table gt_main_out_tab index ls_index_rows into ls_main_out_tab.
        if sy-subrc EQ 0.
* Запоминаем редактируемую строку основных данных
          gs_main_out_tab_edt = ls_main_out_tab.
* Чтение документов
          select *
            appending table gt_doc_out_tab
            from ZTB_DOCDATA_OLP
           where EXTERNAL_ID    = ls_main_out_tab-EXTERNAL_ID
             and SYSTEMID       = ls_main_out_tab-SYSTEMID
             and PROCESS_NUMBER = ls_main_out_tab-PROCESS_NUMBER.
          gt_doc_out_tab_cmp[] = gt_doc_out_tab[].
        endif.

* Конец: Заполняем таблицу gt_doc_out_tab
      g_okcode       = con_exit.
      gv_next_screen = 101.
      perform d0100_exit.
****************************************************
* Обработка события от кнопки Редактировать адреса *
****************************************************
    when con_addredit.
* Узнаем какие строчки выделены
      call method gr_grid_d0100->GET_SELECTED_ROWS
        importing ET_INDEX_ROWS = GT_INDEX_ROWS
                  ET_ROW_NO     = GT_ROW_NO.
* Начало: Заполняем таблицу gt_addr_out_tab
      clear gt_addr_out_tab.
      if GT_INDEX_ROWS[] is initial.
        message e001(1) with 'Необходимо выделить строку ' 'для редактирования адресов'.
        return.
      endif.
      loop at GT_INDEX_ROWS into ls_index_rows.
        exit.
      endloop.
************************************************************
* Далее проверим что на этом экране все данные сохранены   *
* Начало проверки                                          *
************************************************************
      call method gr_grid_d0100->check_changed_data
        IMPORTING E_VALID = lv_valid.
      check lv_valid EQ 'X'.
* Проверяем введенные данные ф. check_data
        perform check_data using ls_index_rows.
* Если нет ошибок то сохраняем иначе показываем журнал ошибок
        if gv_err_logic = 'X'.
          perform display_protocol using 'X'
                                         'X'.
          exit.
        else.
          perform save_data.
        endif.
************************************************************
* проверим что на этом экране все данные сохранены         *
* Конец проверки                                           *
***************************************** ******************

      loop at GT_INDEX_ROWS into ls_index_rows.
        exit.
      endloop.
        read table gt_main_out_tab index ls_index_rows into ls_main_out_tab.
        if sy-subrc EQ 0.
* Запоминаем редактируемую строку основных данных
          gs_main_out_tab_edt = ls_main_out_tab.
* Чтение таблицы адресов
          select *
            appending table gt_addr_out_tab
            from ZTB_ADDRDAT_OLP
           where EXTERNAL_ID    = ls_main_out_tab-EXTERNAL_ID
             and SYSTEMID       = ls_main_out_tab-SYSTEMID
             and PROCESS_NUMBER = ls_main_out_tab-PROCESS_NUMBER.
          gt_addr_out_tab_cmp[] = gt_addr_out_tab[].
        endif.
* Конец: Заполняем таблицу gt_addr_out_tab
      g_okcode       = con_exit.
      gv_next_screen = 102.
      perform d0100_exit.
*****************************************************
* Обработка события от кнопки Редактировать телефон *
*****************************************************
    when con_telephonedit.
* Узнаем какие строчки выделены
      call method gr_grid_d0100->GET_SELECTED_ROWS
        importing ET_INDEX_ROWS = GT_INDEX_ROWS
                  ET_ROW_NO     = GT_ROW_NO.
* Начало: Заполняем таблицу gt_tel_out_tab
      clear gt_tel_out_tab.
      if GT_INDEX_ROWS[] is initial.
        message e001(1) with 'Необходимо выделить строку ' 'для редактирования телефонов'.
        return.
      endif.
      loop at GT_INDEX_ROWS into ls_index_rows.
        exit.
      endloop.

************************************************************
* Далее проверим что на этом экране все данные сохранены   *
* Начало проверки                                          *
************************************************************
      call method gr_grid_d0100->check_changed_data
        IMPORTING E_VALID = lv_valid.
      check lv_valid EQ 'X'.
* Проверяем введенные данные ф. check_data
        perform check_data using ls_index_rows.
* Если нет ошибок то сохраняем иначе показываем журнал ошибок
        if gv_err_logic = 'X'.
          perform display_protocol using 'X'
                                         'X'.
          exit.
        else.
          perform save_data.
        endif.
************************************************************
* проверим что на этом экране все данные сохранены         *
* Конец проверки                                           *
***************************************** ******************

      loop at GT_INDEX_ROWS into ls_index_rows.
        exit.
      endloop.

        read table gt_main_out_tab index ls_index_rows into ls_main_out_tab.
        if sy-subrc EQ 0.
* Запоминаем редактируемую строку основных данных
          gs_main_out_tab_edt = ls_main_out_tab.
* Чтение таблицы телефонов
          select *
            appending table gt_tel_out_tab
            from ZTB_TELNEDAT_OLP
           where EXTERNAL_ID    = ls_main_out_tab-EXTERNAL_ID
             and SYSTEMID       = ls_main_out_tab-SYSTEMID
             and PROCESS_NUMBER = ls_main_out_tab-PROCESS_NUMBER.
          gt_tel_out_tab_cmp[] = gt_tel_out_tab[].
        endif.
* Конец: Заполняем таблицу gt_tel_out_tab
      g_okcode       = con_exit.
      gv_next_screen = 103.
      perform d0100_exit.
****************************************************
* Обработка события от кнопки Просмотреть/Изменить *
****************************************************
    when 'TOGGLE'.                                          "#EC NOTEXT
      data: l_edit type i.

      case gs_screen_option-edit_mode.
        when con_edit_mode_change.
          gs_screen_option-edit_mode = con_edit_mode_display.
          l_edit                     = con_off.
        when con_edit_mode_display.
          if lvprcssd NE 1.
            gs_screen_option-edit_mode = con_edit_mode_change.
            l_edit                     = con_on.
          else.
            gs_screen_option-edit_mode = con_edit_mode_display.
            l_edit                     = con_off.
          endif.
      endcase.

      call method gr_grid_d0100->set_ready_for_input
        exporting
          i_ready_for_input = l_edit.
  endcase.

endform.                    " d0100_fcode

*&---------------------------------------------------------------------*
*&      Module  d0100_fcode  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
module d0100_fcode input.
  perform d0100_fcode.
endmodule.                 " d0100_fcode  INPUT

*&---------------------------------------------------------------------*
*&      Form  d0100_set_grid_events
*&---------------------------------------------------------------------*
*       text
* Форма для установки обработчиков событий
*----------------------------------------------------------------------*
form d0100_set_grid_events .

  create object gr_events_d0100.

  set handler gr_events_d0100->onf4
              for gr_grid_d0100.
  set handler gr_events_d0100->double_click
              for gr_grid_d0100.
  set handler gr_events_d0100->hotspot_click
              for gr_grid_d0100.
  set handler gr_events_d0100->button_click
              for gr_grid_d0100.
  set handler gr_events_d0100->data_changed
              for gr_grid_d0100.
 set handler gr_events_d0100->data_changed_finished
              for gr_grid_d0100.
endform.                    " d0100_set_grid_events


*&---------------------------------------------------------------------*
*&      Form  d0100_event_double_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_event_double_click using e_row    type lvc_s_row
                                    e_column type lvc_s_col."#EC *

.
*  message i000(0k) with 'Двойной щелчок мыши на строке' e_row  e_column.
endform.                    " d0100_event_double_click

*&---------------------------------------------------------------------*
*&      Form  d0100_event_button_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_event_button_click using es_col_id type lvc_s_col
                                    es_row_no type lvc_s_roid."#EC *
*  message i000(0k) with 'Один щелчок мыши на строке' es_row_no-ROW_ID  es_col_id.
endform.                    " d0100_event_button_click

*&---------------------------------------------------------------------*
*&      Form  d0100_event_data_changed
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_event_data_changed using er_data_changed
                                    e_onf4
                                    e_onf4_before
                                    e_onf4_after.           "#EC *
*  message i000(0k) with 'Изменение данных'.
endform.                    " d0100_event_data_changed

*&---------------------------------------------------------------------*
*&      Form  d0100_event_data_changed_finis
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_event_data_changed_finis .                       "#EC *
*  message i000(0k) with 'Изменение данных финал'.
endform.                    " d0100_event_data_changed_finis

*&---------------------------------------------------------------------*
*&      Form  d0100_event_onf4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_event_onf4 using E_FIELDNAME   type LVC_FNAME
                            E_FIELDVALUE  type LVC_VALUE
                            ES_ROW_NO     type LVC_S_ROID
                            ER_EVENT_DATA type ref to CL_ALV_EVENT_DATA
                            ET_BAD_CELLS  type LVC_T_MODI
                            E_DISPLAY     type CHAR01
                                 .
*  message i000(0k) with 'event_onf4' E_FIELDNAME E_FIELDVALUE ES_ROW_NO-ROW_ID.
endform.

*&---------------------------------------------------------------------*
*&      Form  d0100_event_hotspot_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form d0100_event_hotspot_click using e_row_id    type lvc_s_row
                                     e_column_id type lvc_s_col
                                     es_row_no   type lvc_s_roid."#EC *
*  message i000(0k) with 'hotspot_click' e_row_id  e_column_id.
endform.                    " d0100_event_hotspot_click
